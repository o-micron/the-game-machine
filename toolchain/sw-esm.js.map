{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./sw.js"],"names":["__webpack_require__","moduleId","installedModules","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","self","__precacheManifest","concat","isNav","event","request","workbox","routing","registerRoute","strategies","NetworkFirst","cacheName","core","cacheNames","precache","networkTimeoutSeconds","plugins","cacheableResponse","Plugin","statuses","precaching","precacheAndRoute","RegExp","setCatchHandler","caches","match","getCacheKeyForURL","Response","error"],"mappings":"aAIE,SAASA,EAAoBC,GAG5B,GAAGC,EAAiBD,GACnB,OAAOC,EAAiBD,GAAUE,QAGnC,IAAIC,EAASF,EAAiBD,GAAY,CACzCI,EAAGJ,EACHK,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQN,GAAUO,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASH,GAG/DI,EAAOE,GAAI,EAGJF,EAAOD,QAvBf,IAAID,EAAmB,GA4BvBF,EAAoBS,EAAIF,EAGxBP,EAAoBU,EAAIR,EAGxBF,EAAoBW,EAAI,SAASR,EAASS,EAAMC,GAC3Cb,EAAoBc,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEb,EAAoBmB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDtB,EAAoBuB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQtB,EAAoBsB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA3B,EAAoBmB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOtB,EAAoBW,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIR1B,EAAoB8B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAJ,EAAoBW,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRb,EAAoBc,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzGhC,EAAoBmC,EAAI,IAIjBnC,EAAoBA,EAAoBoC,EAAI,Q,oBClFrDC,KAAKC,mBAAqB,GAAGC,OAAOF,KAAKC,oBAAsB,IA0C/D,IAAME,EAAQC,GAAgC,aAAvBA,EAAMC,QAAQlB,KAMrCmB,QAAQC,QAAQC,cACd,IAAD,IAAC,MAAEJ,GAAH,SAAeD,EAAMC,IACrB,IAAIE,QAAQG,WAAWC,aAAa,CAEnCC,UAAWL,QAAQM,KAAKC,WAAWC,SACnCC,sBAAuB,EACvBC,QAAS,CACR,IAAIV,QAAQW,kBAAkBC,OAAO,CACpCC,SAAU,CAAC,WAMfb,QAAQc,WAAWC,iBAAiBrB,KAAKC,mBA9BjB,IAqCxBK,QAAQC,QAAQC,cACd,IAAIc,OAAO,2BACX,IAAIhB,QAAQG,WAAWC,cAEzBJ,QAAQC,QAAQC,cACd,IAAIc,OAAO,8BACX,IAAIhB,QAAQG,WAAWC,cAMzBJ,QAAQc,WAAWC,iBAAiB,CAClC,0CACA,mDAGFf,QAAQC,QAAQgB,gBAAiB,IAAc,IAAd,MAAEnB,GAAY,EAC9C,OAAID,EAAMC,GACFoB,OAAOC,MAAMnB,QAAQc,WAAWM,kBAAkB,gBACnDC,SAASC","file":"sw-esm.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"9/Ks\");\n","self.__precacheManifest = [].concat(self.__precacheManifest || []);\r\n\r\n/* global workbox */\r\n/** We are sure brotli is enabled for browsers supporting script type=module\r\n * so we do brotli support only for them.\r\n * We can do brolti support for other browsers but there is no good way of\r\n * feature detect the same at the time of pre-caching.\r\n */\r\nif (process.env.ENABLE_BROTLI && process.env.ES_BUILD) {\r\n\t// Alter the precache manifest to precache brotli files instead of gzip files.\r\n\tself.__precacheManifest = self.__precacheManifest.map(asset => {\r\n\t\tif (/\\.js$/.test(asset.url)) {\r\n\t\t\tasset.url = asset.url.replace(/\\.esm\\.js$/, '.esm.js.br');\r\n\t\t}\r\n\t\treturn asset;\r\n\t});\r\n\r\n\tclass BrotliRedirectPlugin {\r\n\t\t// Before saving the response in cache, we need to treat the headers.\r\n\t\tasync cacheWillUpdate({ response }) {\r\n\t\t\tconst clonedResponse = response.clone();\r\n\t\t\tif (/\\.js\\.br(\\?.*)?$/.test(clonedResponse.url)) {\r\n\t\t\t\tconst headers = new Headers(clonedResponse.headers);\r\n\t\t\t\theaders.set('content-type', 'application/javascript');\r\n\t\t\t\treturn new Response(await clonedResponse.text(), { headers });\r\n\t\t\t}\r\n\t\t\treturn response;\r\n\t\t}\r\n\t}\r\n\tworkbox.precaching.addPlugins([new BrotliRedirectPlugin()]);\r\n}\r\n\r\nconst precacheOptions = {};\r\nif (process.env.ENABLE_BROTLI) {\r\n\tprecacheOptions['urlManipulation'] = ({ url }) => {\r\n\t\tif (/\\.esm\\.js$/.test(url.href)) {\r\n\t\t\turl.href += '.br';\r\n\t\t}\r\n\t\treturn [url];\r\n\t};\r\n}\r\n\r\nconst isNav = event => event.request.mode === 'navigate';\r\n\r\n/**\r\n * Adding this before `precacheAndRoute` lets us handle all\r\n * the navigation requests even if they are in precache.\r\n */\r\nworkbox.routing.registerRoute(\r\n\t({ event }) => isNav(event),\r\n\tnew workbox.strategies.NetworkFirst({\r\n\t\t// this cache is plunged with every new service worker deploy so we dont need to care about purging the cache.\r\n\t\tcacheName: workbox.core.cacheNames.precache,\r\n\t\tnetworkTimeoutSeconds: 5, // if u dont start getting headers within 5 sec fallback to cache.\r\n\t\tplugins: [\r\n\t\t\tnew workbox.cacheableResponse.Plugin({\r\n\t\t\t\tstatuses: [200], // only cache valid responses, not opaque responses e.g. wifi portal.\r\n\t\t\t}),\r\n\t\t],\r\n\t})\r\n);\r\n\r\nworkbox.precaching.precacheAndRoute(self.__precacheManifest, precacheOptions);\r\n\r\n// Handle unversioned 3p assets, that preact-cli is not handling\r\n// First we want to register these assets with the NetworkFirst strategy.\r\n// Meaning they will be fetched from the network, if available, or from the cache if not\r\n// https://developers.google.com/web/tools/workbox/modules/workbox-strategies#network_first_network_falling_back_to_cache\r\n// https://developers.google.com/web/tools/workbox/modules/workbox-routing#how_to_register_a_regular_expression_route\r\nworkbox.routing.registerRoute(\r\n  new RegExp('/assets/wasm-terminal.*'), \r\n  new workbox.strategies.NetworkFirst()\r\n);\r\nworkbox.routing.registerRoute(\r\n  new RegExp('/assets/wasm-transformer.*'), \r\n  new workbox.strategies.NetworkFirst()\r\n);\r\n// Then, precache these assets as they are updated.\r\n// Since we already defined their routes, they will still follow the network first trategy\r\n// But be precached on initial load!\r\n// https://developers.google.com/web/tools/workbox/modules/workbox-precaching#serving_precached_responses\r\nworkbox.precaching.precacheAndRoute([\r\n  '/assets/wasm-terminal/process.worker.js',\r\n  '/assets/wasm-transformer/wasm-transformer.wasm'\r\n]);\r\n\r\nworkbox.routing.setCatchHandler(({ event }) => {\r\n\tif (isNav(event))\r\n\t\treturn caches.match(workbox.precaching.getCacheKeyForURL('/index.html'));\r\n\treturn Response.error();\r\n});\r\n"],"sourceRoot":""}